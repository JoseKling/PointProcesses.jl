"""
    NoBootstrapTest <: PPGoFTest

An object containing the results of a non-bootstrap based goodness-of-fit test.

# Fields

- `n_sims::Int`: number of simulations performed
- `stat::Float64`: observed test statistic value
- `sim_stats::Vector{Float64}`: test statistics from simulated data
"""
struct NoBootstrapTest <: PPGoFTest
    n_sims::Int
    stat::Float64
    sim_stats::Vector{Float64}
end

"""
    pvalue(nbs::NoBootstrapTest) -> Float64

Calculate the p-value for a NoBootstrapTest.

The p-value is computed as:
    p = (#{simulated statistics ≥ observed statistic} + 1) / (n_sims + 1)

The +1 terms implement a conservative correction that ensures the p-value is never 0,
which would incorrectly suggest absolute certainty in rejecting the null hypothesis.

# Arguments

- `nbs::NoBootstrapTest`: the test result object

# Returns

- `Float64`: p-value in [0, 1], where small values provide evidence against the null hypothesis
"""
pvalue(nbs::NoBootstrapTest) = (count(>=(nbs.stat), nbs.sim_stats) + 1) / (nbs.n_sims + 1)

"""
    NoBootstrapTest(S::Type{<:Statistic}, pp::Type{<:AbstractPointProcess}, h::History; n_sims=1000) -> NoBootstrapTest

Perform a goodness-of-fit test using simulation without bootstrap resampling, comparing
the test statistic computed on the observed data against the distribution of the same
statistic computed on data simulated from the fitted model.

If λ₀(t) is the true intensity function of the process that generated the observed
history, and λ(t; θ) is a a parametrization of the intensity, then the null hypothesis is

    H₀: There exists parameters θₒ such that λ₀(t) = λ(t; θ₀)

This is essentially the Kolmogorov-Smirnov test, but instead of computing the p-value
from the Kolmogorov distribution, this distribution is approximated via simulations.

Notice that this test is better suited when the parameter θ₀ is known, since this
procedure does not account for parameter estimation. For more details on this, see
[Jogesh Babu and Rao (2004)](http://www.jstor.org/stable/25053332),
[Reynaud-Bouret et. al. (2014)](https://doi.org/10.1186/2190-8567-4-3), 
[Kling and Vetter (2024)](https://arxiv.org/abs/2407.09130).

# Arguments

- `S::Type{<:Statistic}`: the type of test statistic to use
- `pp::Type{<:AbstractPointProcess}`: the null hypothesis model family
- `h::History`: the observed event history
- `n_sims::Int=1000`: number of simulations to perform for the test

# Returns

- `NoBootstrapTest`: test result object containing the observed statistic, simulated statistics, and test metadata

# Notes

- Uses `Threads.@threads` for parallel computation of simulated statistics

# Example

```julia
# Test if data follows a Hawkes process using Kolmogorov-Smirnov statistic
# with respect to time rescaled interevent times and unit exponential
test = NoBootstrapTest(KSExponential, HawkesProcess, history; n_sims=1000)
p = pvalue(test)
```
"""
function NoBootstrapTest(S::Type{<:Statistic}, PP::Type{<:AbstractPointProcess}, h::History; n_sims=1000)
    pp_est = estimate(PP, h)
    stat = statistic(S, pp_est, h)
    sim_stats = Vector{Float64}(undef, n_sims)
    Threads.@threads for i in 1:n_sims
        sim = simulate(pp_est, h.tmin, h.tmax)
        sim_stats[i] = statistic(S, pp_est, sim)
    end
    return NoBootstrapTest(n_sims, stat, sim_stats)
end

"""
    NoBootstrapTest(S::Type{<:Statistic}, pp::AbstractPointProcess, h::History; n_sims=1000) -> NoBootstrapTest

Perform a goodness-of-fit test using simulation without bootstrap resampling, using
a point process with known/fixed parameters.

This method tests whether the observed data could have been generated by the specific
point process `pp` with its given parameters. Unlike the method that takes a process type,
this version does not estimate parameters from the data - it uses the process exactly as provided.

If λ₀(t) is the true intensity function of the process that generated the observed
history, and λ(t; θ) is the intensity of the provided process `pp`, then the null hypothesis is:

    H₀: λ₀(t) = λ(t; θ) for the specific θ values in `pp`

This is the classical goodness-of-fit scenario where parameters are assumed known.

# Arguments

- `S::Type{<:Statistic}`: the type of test statistic to use
- `pp::AbstractPointProcess`: the specific point process model with fixed parameters
- `h::History`: the observed event history
- `n_sims::Int=1000`: number of simulations to perform for the test

# Returns

- `NoBootstrapTest`: test result object containing the observed statistic, simulated statistics, and test metadata

# Notes

- Uses `Threads.@threads` for parallel computation of simulated statistics

# Example

```julia
# Test if data follows a specific Hawkes process with known parameters
known_process = HawkesProcess(1.5, 0.8, 2.0)
test = NoBootstrapTest(KSExponential, known_process, history; n_sims=1000)
p = pvalue(test)
```
"""
function NoBootstrapTest(S::Type{<:Statistic}, pp::AbstractPointProcess, h::History; n_sims=1000)
    stat = statistic(S, pp, h)
    sim_stats = Vector{Float64}(undef, n_sims)
    Threads.@threads for i in 1:n_sims
        sim = simulate(pp, h.tmin, h.tmax)
        sim_stats[i] = statistic(S, pp, sim)
    end
    return NoBootstrapTest(n_sims, stat, sim_stats)
end
